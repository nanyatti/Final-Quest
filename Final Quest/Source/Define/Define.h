#pragma once

/*!
* @brief 複数クラスから参照する定義情報
*/
namespace Define {

	// 生成可能なシーンを列挙
	enum Scene {
		TITLE,
		DUNGEON,
		BATTLE,
		NONE
	};

	// キャラクターステータス
	struct Status {
		int level;
		int hp;
		int hp_max;
		int power;
		int deffence;
		int agility;
		int battle_count;
	};

	const int WINDOW_WIDTH	= 640;	// ウィンドウの横幅
	const int WINDOW_HEIGHT	= 480;	// ウィンドウの縦幅

	// マップ
	const int WIDE = 32;			//一区間の大きさ。例(32x32)
	const int NUM_TOTAL_STAGE = 2;


	//int mapd[WINDOW_HEIGHT / WIDE][WINDOW_WIDTH / WIDE] = { {}, };//通れる場所かどうかを判断するための２次元配列
	//int map[NUM_TOTAL_STAGE][WINDOW_HEIGHT / WIDE][WINDOW_WIDTH / WIDE] = {//マップデータを格納するための３次元配列
	//	{
	//		{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
	//		{3,0,0,0,1,1,0,0,0,0,0,0,0,0,2,2,2,2,0,0},
	//		{3,0,0,0,1,1,1,0,0,0,0,0,0,0,0,2,2,0,0,3},
	//		{3,0,2,0,1,1,0,0,0,0,0,0,0,2,0,2,2,0,0,3},
	//		{3,2,2,0,1,1,1,1,2,2,0,0,0,0,0,0,2,0,0,3},
	//		{3,0,2,0,3,3,1,1,1,1,0,0,0,0,0,0,0,0,0,3},
	//		{3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3},
	//		{3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3},
	//		{3,0,2,2,2,2,1,1,0,0,0,0,0,0,0,0,1,2,2,3},
	//		{3,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,3},
	//		{3,0,0,2,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,3},
	//		{3,0,0,2,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,3},
	//		{3,0,2,2,2,2,2,2,2,0,0,0,2,2,2,2,2,2,2,3},
	//		{3,0,2,2,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,3},
	//		{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
	//	},
	//	{
	//		{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
	//		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,0,3},
	//		{3,0,0,0,1,0,1,0,0,0,0,0,0,0,1,1,1,0,0,3},
	//		{3,0,0,0,0,0,1,0,0,0,0,0,0,2,1,2,1,0,0,3},
	//		{3,2,0,0,1,0,0,0,0,0,0,0,2,1,1,0,1,0,0,3},
	//		{3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,3},
	//		{3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,3},
	//		{3,0,0,0,1,1,0,0,1,1,1,1,0,0,0,1,0,0,0,3},
	//		{3,0,0,0,1,1,0,0,0,0,1,1,0,0,0,1,0,0,0,3},
	//		{3,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,3},
	//		{3,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,1,1,0,3},
	//		{3,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,3},
	//		{3,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,3},
	//		{3,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,3},
	//		{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
	//	}
	//};

}
